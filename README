#lang racket

;; row-reduce.rkt
;;
;; Vedant Kumar <vsk@berkeley.edu>
;;
;; This row reduction algorithm attempts to bring matrices to reduced row 
;; echelon form. The implementation is interesting because it's completely
;; symbolic. Supply your matrices as vectors of vectors of symbols.

---------------------------------------------------------------------------
Before:
'#(#(1 0 0) #(0 1 0) #(0 0 1))
After:
'#(#(1 0 0) #(0 1 0) #(0 0 1))

Before:
'#(#(1 0 0) #(1 1 0) #(1 1 1))
After:
'#(#(1 0 0) #(0 1 0) #(0 0 1))

Before:
'#(#(1 0 0 x) #(1 1 0 (+ x 1)) #(2 3 1 (/ x 2)))
After:
'#(#(1 0 0 x) #(0 1 0 1) #(0 0 1 (+ (+ (/ x 2) (* -2 x)) -3)))

Before:
'#(#(a (+ 2 b) c) #(b (+ 4 b) d))
After:
'#(#(1
     0
     (+
      (* (/ 1 a) c)
      (*
       (- (* (/ 1 a) (+ 2 b)))
       (*
        (/ 1 (+ (+ 4 b) (* (- b) (* (/ 1 a) (+ 2 b)))))
        (+ d (* (- b) (* (/ 1 a) c)))))))
   #(0
     1
     (*
      (/ 1 (+ (+ 4 b) (* (- b) (* (/ 1 a) (+ 2 b)))))
      (+ d (* (- b) (* (/ 1 a) c))))))

Before:
'#(#(a (* 3 b) (/ c 3) 5) #((* 3 b) (+ a 1) c 7) #((* 2 c) (/ a c) b 13))
After:
'#(#(1
     0
     0
     (+
      (+
       (* (/ 1 a) 5)
       (*
        (- (* (/ 1 a) (* 3 b)))
        (*
         (/ 1 (+ (+ a 1) (* (- (* 3 b)) (* (/ 1 a) (* 3 b)))))
         (+ 7 (* (- (* 3 b)) (* (/ 1 a) 5))))))
      (*
       (-
        (+
         (* (/ 1 a) (/ c 3))
         (*
          (- (* (/ 1 a) (* 3 b)))
          (*
           (/ 1 (+ (+ a 1) (* (- (* 3 b)) (* (/ 1 a) (* 3 b)))))
           (+ c (* (- (* 3 b)) (* (/ 1 a) (/ c 3))))))))
       (*
        (/
         1
         (+
          (+ b (* (- (* 2 c)) (* (/ 1 a) (/ c 3))))
          (*
           (- (+ (/ a c) (* (- (* 2 c)) (* (/ 1 a) (* 3 b)))))
           (*
            (/ 1 (+ (+ a 1) (* (- (* 3 b)) (* (/ 1 a) (* 3 b)))))
            (+ c (* (- (* 3 b)) (* (/ 1 a) (/ c 3))))))))
        (+
         (+ 13 (* (- (* 2 c)) (* (/ 1 a) 5)))
         (*
          (- (+ (/ a c) (* (- (* 2 c)) (* (/ 1 a) (* 3 b)))))
          (*
           (/ 1 (+ (+ a 1) (* (- (* 3 b)) (* (/ 1 a) (* 3 b)))))
           (+ 7 (* (- (* 3 b)) (* (/ 1 a) 5))))))))))
   #(0
     1
     0
     (+
      (*
       (/ 1 (+ (+ a 1) (* (- (* 3 b)) (* (/ 1 a) (* 3 b)))))
       (+ 7 (* (- (* 3 b)) (* (/ 1 a) 5))))
      (*
       (-
        (*
         (/ 1 (+ (+ a 1) (* (- (* 3 b)) (* (/ 1 a) (* 3 b)))))
         (+ c (* (- (* 3 b)) (* (/ 1 a) (/ c 3))))))
       (*
        (/
         1
         (+
          (+ b (* (- (* 2 c)) (* (/ 1 a) (/ c 3))))
          (*
           (- (+ (/ a c) (* (- (* 2 c)) (* (/ 1 a) (* 3 b)))))
           (*
            (/ 1 (+ (+ a 1) (* (- (* 3 b)) (* (/ 1 a) (* 3 b)))))
            (+ c (* (- (* 3 b)) (* (/ 1 a) (/ c 3))))))))
        (+
         (+ 13 (* (- (* 2 c)) (* (/ 1 a) 5)))
         (*
          (- (+ (/ a c) (* (- (* 2 c)) (* (/ 1 a) (* 3 b)))))
          (*
           (/ 1 (+ (+ a 1) (* (- (* 3 b)) (* (/ 1 a) (* 3 b)))))
           (+ 7 (* (- (* 3 b)) (* (/ 1 a) 5))))))))))
   #(0
     0
     1
     (*
      (/
       1
       (+
        (+ b (* (- (* 2 c)) (* (/ 1 a) (/ c 3))))
        (*
         (- (+ (/ a c) (* (- (* 2 c)) (* (/ 1 a) (* 3 b)))))
         (*
          (/ 1 (+ (+ a 1) (* (- (* 3 b)) (* (/ 1 a) (* 3 b)))))
          (+ c (* (- (* 3 b)) (* (/ 1 a) (/ c 3))))))))
      (+
       (+ 13 (* (- (* 2 c)) (* (/ 1 a) 5)))
       (*
        (- (+ (/ a c) (* (- (* 2 c)) (* (/ 1 a) (* 3 b)))))
        (*
         (/ 1 (+ (+ a 1) (* (- (* 3 b)) (* (/ 1 a) (* 3 b)))))
         (+ 7 (* (- (* 3 b)) (* (/ 1 a) 5)))))))))
